'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Coordinate = require('../Coordinate');

var _Coordinate2 = _interopRequireDefault(_Coordinate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CoordinateBuilder = function () {
  function CoordinateBuilder() {
    _classCallCheck(this, CoordinateBuilder);
  }

  _createClass(CoordinateBuilder, null, [{
    key: 'build',
    value: function build(coordinate) {
      if (!('latitude' in coordinate)) {
        throw new ReferenceError('missing latitude field');
      }

      if (!('longitude' in coordinate)) {
        throw new ReferenceError('missing longitude field');
      }

      if (!CoordinateBuilder.isNumeric(coordinate['latitude'])) {
        throw new TypeError('latitude is non-numeric');
      }

      if (!CoordinateBuilder.isNumeric(coordinate['longitude'])) {
        throw new TypeError('longitude is non-numeric');
      }

      return new _Coordinate2.default({
        lat: coordinate['latitude'],
        lng: coordinate['longitude']
      });
    }
  }, {
    key: 'isNumeric',
    value: function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
  }]);

  return CoordinateBuilder;
}();

exports.default = CoordinateBuilder;