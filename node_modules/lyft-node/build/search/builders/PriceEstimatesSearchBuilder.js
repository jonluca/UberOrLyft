'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _Coordinate = require('../../data/Coordinate');

var _Coordinate2 = _interopRequireDefault(_Coordinate);

var _CoordinateBuilder = require('../../data/builders/CoordinateBuilder');

var _CoordinateBuilder2 = _interopRequireDefault(_CoordinateBuilder);

var _PriceEstimatesSearch = require('../PriceEstimatesSearch');

var _PriceEstimatesSearch2 = _interopRequireDefault(_PriceEstimatesSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PriceEstimatesSearchBuilder = function () {
  function PriceEstimatesSearchBuilder() {
    _classCallCheck(this, PriceEstimatesSearchBuilder);
  }

  _createClass(PriceEstimatesSearchBuilder, null, [{
    key: 'build',
    value: function build(json) {
      if (!('start' in json)) {
        throw new TypeError('start is not in the search');
      }

      if (!('end' in json)) {
        throw new TypeError('end is not in the search');
      }

      var args = (0, _immutable.Map)();
      if ('seatCount' in json) {
        var seatCount = PriceEstimatesSearchBuilder.validateSeatCount(json['seatCount']);
        args = args.set('seatCount', seatCount);
      }

      var startCoordinate = _CoordinateBuilder2.default.build(json['start']);
      var endCoordinate = _CoordinateBuilder2.default.build(json['end']);

      args = args.set('start', startCoordinate);
      args = args.set('end', endCoordinate);

      return new _PriceEstimatesSearch2.default(args);
    }
  }, {
    key: 'validateSeatCount',
    value: function validateSeatCount(json) {
      if (!Number.isInteger(json)) {
        throw new TypeError('seatCount is not an integer');
      }

      var seatCount = json['seatCount'];

      // https://developer.uber.com/docs/riders/references/api/v1.2/estimates-price-get
      if (seatCount < 1) {
        throw new RangeError('seatCount must be non-zero');
      }

      if (seatCount > 2) {
        throw new RangeError('seatCount max value is 2');
      }

      return seatCount;
    }
  }]);

  return PriceEstimatesSearchBuilder;
}();

exports.default = PriceEstimatesSearchBuilder;