'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _Coordinate = require('../../data/Coordinate');

var _Coordinate2 = _interopRequireDefault(_Coordinate);

var _CoordinateBuilder = require('../../data/builders/CoordinateBuilder');

var _CoordinateBuilder2 = _interopRequireDefault(_CoordinateBuilder);

var _DriverEtaSearch = require('../DriverEtaSearch');

var _DriverEtaSearch2 = _interopRequireDefault(_DriverEtaSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DriverEtaSearchBuilder = function () {
  function DriverEtaSearchBuilder() {
    _classCallCheck(this, DriverEtaSearchBuilder);
  }

  _createClass(DriverEtaSearchBuilder, null, [{
    key: 'build',
    value: function build(json) {
      var args = (0, _immutable.Map)();

      if (!('start' in json)) {
        throw new TypeError('start is not in the search');
      }

      var startCoordinate = _CoordinateBuilder2.default.build(json['start']);
      args = args.set('startCoordinate', startCoordinate);

      if ('end' in json) {
        var endCoordinate = _CoordinateBuilder2.default.build(json['end']);
        args = args.set('endCoordinate', endCoordinate);
      }

      if ('rideType' in json) {
        var rideType = DriverEtaSearchBuilder.validateRideType(json['rideType']);
        args = args.set('rideType', rideType);
      }

      return new _DriverEtaSearch2.default(args);
    }
  }, {
    key: 'validateRideType',
    value: function validateRideType(rideType) {
      if (!Object.prototype.toString.call(rideType) === '[object String]') {
        throw new TypeError('rideType is not a string');
      }

      var rideTypes = ['lyft', 'lyft_line', 'lyft_plus'];

      if (rideTypes.indexOf(rideType) === -1) {
        throw new RangeError('rideType must be either \'lyft\', \'lyft_line\', or \'lyft_plus\'');
      }

      return rideType;
    }
  }]);

  return DriverEtaSearchBuilder;
}();

exports.default = DriverEtaSearchBuilder;